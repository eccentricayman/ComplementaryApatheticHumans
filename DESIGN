====================================================================
DW: This is a 4 person group that has not spoken with me ahead of time. Also missing how you will be using the conepts from class
====================================================================

Ayman Ahmed, Jason Chua

Project:
This project is a terminal based version of Cards Against Humanity, a popular card game involving multiple white cards, 
with phrases on them being used to fill in the blank for a black card. All players start out with 10 white cards.
The Card Czar is the person who created the game; he holds the black card, and decides which 
white card combined with his black card has the funniest phrase. The person who has the funniest phrase becomes the 
Card Czar next turn, and everyone else gets one more white card. The game ends when someone out of white cards.

UI:
The project will be used through the terminal; a player can create a game or search for existing ones. There are minimum 4
players per game. Once the game starts, each person will get a list of their white cards, and the card czar will get his
black card. Once every person has entered a number (corresponding to a card) into their terminal, the Card Czar and the players
will have each phrase show up on their screen. Once they all print, the card czar will choose the funniest, and it will display
that phrase plus the one who's white card created it. Everybody else will get a white card, and that person will start as a 
card czar. Throughout the game, players can speak to the entire group, just having a single line message print to everyones'
terminals.

Technical Design:
    Topics Covered:
        - We will be using basic networking to have a server and multiple clients. The server will also act as a client, 
          but will have extra abilities like stopping the game.
        - We will use semaphores to limit the amount of players that can join the game.
        - We will use file I/O to get data from the cards against humanity .txt file, which contains the data for all the
          cards.
        
    Breakdown:
        - The networking will be done at the end - there are two parts, first the game and then the networking.
        - The game will have three parts: parsing the cards, making the user interface, and creating the data 
        - transfer method.
        
    Data Structures:
        - We will use arrays to hold the black card and white card info.
        - We will use structs to send data between client/server. The structs will all have 1 string + nested struct; string is
          info type, while nested struct will contain data being sent. 
          I.E. 
          { 'message', { 'hi!' }; };
          or
          { 'cards', {<# of cards>, 'card1'}; };

    Timeline:
        Day 1: Parse cards, and be able to shuffle them.
        Days 2-3: Make a working client using fake data structs from a "server".
        Day 4: Make the client send working data structs.
        Day 5: Make the server work with data from the client.
        Day 6: Make the server send data properly.
        Days 8-9: Make the client UI for the player running the server.
        Days 10-11: Make the networking part of the server, and have a UI for creating a game.
        Days 12-13: Make the client UI able to find a game and connect to the server.
        Day 14: Create one unified C file that lets you choose to start a game server or look for one.
